// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  uuid String
  username String @unique
  password String
  profile Profile
  articles Article[]
  likes Like[]
}

type Profile {
  profileImageURL String
  twitterURL String
  facebookURL String
  description String
}

model Article {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  slug Int @unique
  createdAt DateTime @default(now())
  published Boolean @default(false)
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  content String 
  thumbnailURL String
  title String
  tagIDs String[] @db.ObjectId
  tags Tag[] @relation(fields: [tagIDs], references: [id])
  categoryIDs String[] @db.ObjectId
  categories Category[] @relation(fields: [categoryIDs], references: [id])
  likes Like[]
}

model Tag {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  articleIDs String[] @db.ObjectId
  articles Article[] @relation(fields: [articleIDs], references: [id])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  articleIDs String[] @db.ObjectId
  articles Article[] @relation(fields: [articleIDs], references: [id])
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  article   Article @relation(fields: [articleId], references: [id])
  articleId String  @db.ObjectId
  createdAt DateTime @default(now())
}